from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
import pandas as pd
import os
import datetime
from collections import defaultdict

app = Flask(__name__)

# ‚úÖ Habilitar CORS globalmente (mejor para evitar errores)

CORS(app, resources={r"/chat": {"origins": "https://chatbot-claro.onrender.com"}})

usuarios = {}
conversaciones = []
metricas = defaultdict(int)

# ‚úÖ Ruta robusta que funciona tanto en local como en Render
ruta_excel = os.path.join(os.path.dirname(__file__), "Ejemplo de alarmas CMM.xlsx")

if not os.path.exists(ruta_excel):
    raise FileNotFoundError(f"‚ö†Ô∏è Archivo no encontrado en: {ruta_excel}")

df = pd.read_excel(ruta_excel, engine="openpyxl")
df.columns = df.columns.str.strip().str.lower()

if "numero alarma" not in df.columns or "nombre del elemento" not in df.columns:
    raise KeyError("‚ùå Las columnas necesarias no existen en el archivo Excel.")

df["numero alarma"] = df["numero alarma"].astype(str).str.strip()
df["nombre del elemento"] = df["nombre del elemento"].str.lower().str.strip()

def menu_principal():
    return (
        "üìã Men√∫ principal:\n"
        "1. Alarmas de plataformas.\n"
        "2. Documentaci√≥n de las plataformas.\n"
        "3. Incidentes activos de las plataformas.\n"
        "4. Estado operativo de las plataformas.\n"
        "5. Cambios activos de las plataformas.\n"
        "6. Hablar con el administrador de la plataforma."
    )

@app.route("/")
def index():
    return render_template("index.html")


# Sugerencia de mejora profesional:
# Puedes permitir que el usuario consulte alarmas por coincidencia parcial (no solo exacta)
# y mostrar m√∫ltiples resultados en una tabla profesional usando render_alarmas_table.

@app.route("/chat", methods=["POST"])
def chat():
    msg = request.json.get("message", "")
    if not isinstance(msg, str):
        msg = str(msg)
    msg = msg.strip().lower()
    user_id = "usuario1"

    if user_id not in usuarios:
        usuarios[user_id] = {"estado": "inicio"}

    estado = usuarios[user_id]["estado"]

    def respuesta_enriquecida(texto, sugerencias=None, extra=None):
        resp = {"response": texto}
        if sugerencias:
            resp["suggestions"] = sugerencias
        if extra:
            resp.update(extra)
        # Registro de conversaci√≥n
        conversaciones.append({
            "timestamp": datetime.datetime.now().isoformat(),
            "usuario": user_id,
            "mensaje": msg,
            "respuesta": texto,
            "estado": estado
        })
        metricas[user_id] += 1
        if estado == "inicio":
            metricas["inicio"] += 1
        elif estado == "espera_alarma":
            metricas["consulta_alarma"] += 1
        elif estado == "espera_elemento":
            metricas["consulta_elemento"] += 1
        return jsonify(resp)

    # Saludo inicial profesional y men√∫ experto
    if estado == "inicio":
        if msg in ["hola", "buen d√≠a", "buenos d√≠as", "buenas", "saludo", "inicio"]:
            saludo = (
                "<b>üëã Bienvenido al asistente experto de plataformas Core.</b><br>"
                "¬øEn qu√© puedo ayudarte hoy?<br><br>"
                "<ol>"
                "<li><b>Alarmas de plataformas</b>: Consulta alarmas activas, severidad y acciones recomendadas.</li>"
                "<li><b>Documentaci√≥n</b>: Accede a manuales, procedimientos y recursos t√©cnicos.</li>"
                "<li><b>Incidentes activos</b>: Revisa incidentes cr√≠ticos y su estado actual.</li>"
                "<li><b>Estado operativo</b>: Verifica el estado de operaci√≥n de cada plataforma.</li>"
                "<li><b>Cambios activos</b>: Consulta cambios programados y su impacto.</li>"
                "<li><b>Hablar con el administrador</b>: Contacta directamente al responsable t√©cnico.</li>"
                "</ol>"
                "<i>Selecciona una opci√≥n (1-6) o describe tu consulta.</i>"
            )
            return respuesta_enriquecida(saludo, ["1", "2", "3", "4", "5", "6"])
        if msg == "1":
            usuarios[user_id]["estado"] = "espera_alarma"
            return respuesta_enriquecida(
                "üîé <b>Consulta experta de alarmas:</b><br>Por favor ingresa el <b>n√∫mero de alarma</b> que deseas consultar.<br><i>Ejemplo: 12345</i>",
                ["12345", "67890", "54321"],
                {"help": "Puedes buscar por coincidencia parcial o total."}
            )
        elif msg == "2":
            return respuesta_enriquecida(
                "üìÑ <b>Documentaci√≥n t√©cnica disponible:</b><br>"
                "‚Ä¢ <a href='https://tu-pdf-hosting.com/manual.pdf' target='_blank'>Manual PDF</a> (Procedimientos, configuraciones)<br>"
                "‚Ä¢ <a href='https://jefatura-url-de-alarmas.sharepoint.com'>SharePoint de alarmas</a> (Hist√≥rico y reportes)<br>"
                "<i>¬øNecesitas ayuda con alg√∫n documento espec√≠fico?</i>",
                ["Manual PDF", "SharePoint de alarmas", "Solicitar procedimiento"]
            )
        elif msg == "3":
            return respuesta_enriquecida(
                "üö® <b>Incidentes activos:</b><br>"
                "‚Ä¢ <span style='color:green;'>Ning√∫n incidente cr√≠tico reportado.</span><br>"
                "‚Ä¢ √öltima actualizaci√≥n: <b>09:00 AM</b>.<br>"
                "‚Ä¢ <a href='#' onclick='reportarIncidente()'>Reportar nuevo incidente</a><br>"
                "<i>¬øDeseas ver el historial o detalles de alg√∫n incidente?</i>",
                ["Reportar incidente", "Ver historial", "Ver detalles"]
            )
        elif msg == "4":
            return respuesta_enriquecida(
                "üü¢ <b>Estado operativo:</b><br>"
                "‚Ä¢ Todas las plataformas se encuentran <b>operativas</b>.<br>"
                "‚Ä¢ No se detectan degradaciones ni eventos cr√≠ticos.<br>"
                "<i>¬øQuieres ver el estado detallado de una plataforma espec√≠fica?</i>",
                ["Ver detalles", "Contactar administrador", "Ver hist√≥rico"]
            )
        elif msg == "5":
            return respuesta_enriquecida(
                "üîÑ <b>Cambios activos:</b><br>"
                "‚Ä¢ No hay cambios activos en este momento.<br>"
                "‚Ä¢ √öltima revisi√≥n: <b>08:30 AM</b>.<br>"
                "<i>¬øDeseas consultar el historial de cambios o programar uno nuevo?</i>",
                ["Ver historial de cambios", "Programar cambio"]
            )
        elif msg == "6":
            return respuesta_enriquecida(
                "üë®‚Äçüíº <b>Contacto administrador:</b><br>"
                "‚Ä¢ Puedes contactar al administrador en <a href='mailto:38514121@claro.com.co'>38514121@claro.com.co</a>.<br>"
                "‚Ä¢ <a href='tel:+573213445747'>Llamar al +573213445747</a><br>"
                "<i>¬øNecesitas soporte t√©cnico o agendar una reuni√≥n?</i>",
                ["Enviar correo", "Ver otros contactos", "Agendar reuni√≥n"]
            )
        else:
            return respuesta_enriquecida(
                "<b>‚ùì No entend√≠ tu consulta.</b><br>Por favor selecciona una opci√≥n del men√∫ o describe tu requerimiento.",
                ["1", "2", "3", "4", "5", "6", "Ayuda"]
            )

    elif estado == "espera_alarma":
        usuarios[user_id]["numero_alarma"] = msg
        usuarios[user_id]["estado"] = "espera_elemento"
        metricas["alarma_solicitada"] += 1
        return respuesta_enriquecida(
            "Por favor ingresa el nombre del elemento que reporta la alarma.",
            ["Motor principal", "V√°lvula de seguridad", "Sensor de temperatura"]
        )

    elif estado == "espera_elemento":
        numero = usuarios[user_id]["numero_alarma"]
        elemento = msg.strip().lower()
        usuarios[user_id]["estado"] = "inicio"
        metricas["elemento_solicitado"] += 1

        resultado = df[
            df["numero alarma"].str.contains(numero) &
            df["nombre del elemento"].str.contains(elemento)
        ]

        def color_severidad(sev):
            sev = str(sev).strip().lower()
            if sev == 'baja':
                return 'sev sev-baja'
            elif sev == 'media':
                return 'sev sev-media'
            elif sev == 'alta':
                return 'sev sev-alta'
            elif sev == 'major':
                return 'sev sev-alta'
            elif sev == 'critical':
                return 'sev sev-alta'
            return 'sev'

        def alerta_critica(severidad):
            sev = str(severidad).strip().lower()
            if sev == 'critical':
                return '<div class="alert alert-danger" style="margin-bottom:8px;"><b>‚ö†Ô∏è Alerta CR√çTICA:</b> Esta alarma requiere atenci√≥n inmediata.</div>'
            elif sev == 'major':
                return '<div class="alert alert-warning" style="margin-bottom:8px;"><b>‚ö†Ô∏è Alerta MAYOR:</b> Revisa este evento lo antes posible.</div>'
            return ''

        if not resultado.empty:
            filas = resultado.to_dict(orient="records")
            if len(filas) == 1:
                fila = filas[0]
                alerta = alerta_critica(fila.get('severidad',''))
                tabla = f'''
                <div class="tabla-alarma-responsive">
                  <table class="tabla-alarma">
                    <tr>
                      <th>N√∫mero alarma</th>
                      <th>Nombre del elemento</th>
                      <th>Descripci√≥n</th>
                      <th>Severidad</th>
                      <th>Significado</th>
                      <th>Acciones</th>
                    </tr>
                    <tr class="destacada">
                      <td data-tooltip="Identificador √∫nico de la alarma" data-copiar="{fila.get('numero alarma','')}"><b>{fila.get('numero alarma','')}</b> <span class='copiar-celda'>üìã</span></td>
                      <td data-tooltip="Elemento afectado por la alarma">{fila.get('nombre del elemento','')}</td>
                      <td data-tooltip="Descripci√≥n t√©cnica de la alarma">{fila.get('descripci√≥n alarma','')}</td>
                      <td data-tooltip="Nivel de severidad: baja, media, alta, major o critical"><span class="sev {color_severidad(fila.get('severidad',''))}">{fila.get('severidad','')}</span></td>
                      <td data-tooltip="Significado t√©cnico de la alarma">{fila.get('significado','')}</td>
                      <td data-tooltip="Acciones recomendadas para resolver la alarma">{fila.get('acciones','')}</td>
                    </tr>
                  </table>
                </div>
                '''
                respuesta = f"<b>üîî Alarma detectada:</b><br>{alerta}{tabla}"
            else:
                tabla = render_alarmas_table(filas)
                respuesta = f"<b>üîî Resultados encontrados ({len(filas)}):</b><br>{tabla}"
            sugerencias = ["Consultar otra alarma", "Volver al men√∫ principal"]
        else:
            respuesta = "‚ùå No se encontr√≥ una alarma con ese n√∫mero y nombre de elemento."
            sugerencias = ["Intentar de nuevo", "Volver al men√∫ principal"]

        if "‚ùå" in respuesta:
            respuesta += "<br><br>" + menu_principal()

        return respuesta_enriquecida(respuesta, sugerencias)

    return respuesta_enriquecida("‚ùå Algo sali√≥ mal. Intenta de nuevo.", ["Volver al men√∫ principal"])

# Endpoint opcional para ver m√©tricas y registro de conversaciones
@app.route("/metrics")
def metrics():
    return jsonify({
        "metricas": dict(metricas),
        "conversaciones": conversaciones[-10:]  # √∫ltimas 10 conversaciones
    })

def severidad_class(severidad):
    sev = str(severidad).strip().lower()
    if sev == 'baja':
        return 'sev sev-baja'
    elif sev == 'media':
        return 'sev sev-media'
    elif sev == 'alta':
        return 'sev sev-alta'
    return 'sev'

def render_alarmas_table(rows):
    """
    Renderiza una tabla HTML profesional y responsiva para mostrar alarmas,
    con tooltips, copiar, colores y formato experto.
    """
    table = '''
    <div class="tabla-alarma-responsive">
      <table class="tabla-alarma">
        <thead>
          <tr>
            <th>Acciones</th>
            <th>Significado</th>
            <th>Severidad</th>
            <th>Descripci√≥n alarma</th>
            <th>N√∫mero alarma</th>
            <th>Nombre del elemento</th>
          </tr>
        </thead>
        <tbody>
    '''
    for row in rows:
        acciones = row.get('Acciones', '')
        significado = row.get('Significado', '')
        severidad = row.get('Severidad', '')
        descripcion = row.get('Descripci√≥n alarma', '')
        numero = row.get('N√∫mero alarma', '')
        elemento = row.get('Nombre del elemento', '')

        table += f'''
          <tr>
            <td data-tooltip="Acci√≥n recomendada" data-copiar="{acciones}">{acciones} <span class='copiar-celda'>üìã</span></td>
            <td data-tooltip="Significado de la alarma" data-copiar="{significado}">{significado} <span class='copiar-celda'>üìã</span></td>
            <td><span class="{color_severidad(severidad)}">{severidad}</span></td>
            <td data-tooltip="Descripci√≥n detallada" data-copiar="{descripcion}">{descripcion} <span class='copiar-celda'>üìã</span></td>
            <td data-tooltip="Identificador √∫nico de la alarma" data-copiar="{numero}"><b>{numero}</b> <span class='copiar-celda'>üìã</span></td>
            <td data-tooltip="Elemento afectado" data-copiar="{elemento}">{elemento} <span class='copiar-celda'>üìã</span></td>
          </tr>
        '''
    table += '''
        </tbody>
      </table>
    </div>
    '''
    return table

# Ejemplo de uso avanzado en tu endpoint:
# if not resultado.empty:
#     filas = resultado.to_dict(orient="records")
#     tabla_html = render_alarmas_table(filas)
#     respuesta = f"<b>üîî Resultados encontrados:</b><br>{tabla_html}"
#     return respuesta_enriquecida(respuesta, ["Consultar otra alarma", "Volver al men√∫ principal"])
# else:
#     return respuesta_enriquecida("‚ùå No se encontraron alarmas para tu b√∫squeda.<br><br>" + menu_principal(), ["Intentar de nuevo", "Volver al men√∫ principal"])

if __name__ == "__main__":
    import os
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)